---
title: Ranking chart
description: |
  A chart which shows how the rank of something varies.
order: 12
showcase: 3
version: v0.8.0
component: chart.ranking
examples:
  - title: "Simple ranking chart"
    description: |
      Series are created by referencing a column in the data using `key` e.g. the `Country` column. They will be ranked by the first item in `columns`.
    config:
      data: test.data.heatmap
      key: Country
      columns:
        - name: 2018
          template: '{{ Ranks→2018 }}'
        - name: 2019
          template: '{{ Ranks→2019 }}'
        - name: 2020
          template: '{{ Ranks→2020 }}'
  - title: "Customise the lines"
    description: |
      The `curvature` of the lines can be in the range 0-1 (default of `1`). The `stroke-width` can be in the range 0-1 (default of `0.5`). You can add ranks on the lines by setting `circle` in the range 0-1 (default of `0`).
    config:
      data: test.data.heatmap
      key: Country
      circles: 0.9
      columns:
        - name: 2018
          template: '{{ Ranks→2018 }}'
        - name: 2019
          template: '{{ Ranks→2019 }}'
        - name: 2020
          template: '{{ Ranks→2020 }}'
      curvature: 0
      stroke-width: 0.2
      font-size: 24
  - title: "Coloured lines"
    description: |
      The colour of each series can be scaled by the column referenced by `colour`. This column contains a colour as a text string. In this example we will also add `circles` showing the ranks.

      Key: <span style="padding:0.125em 0.25em;background:#f4ac36;color:black;">Asia</span> <span style="padding:0.125em 0.25em;background:#e53012;color:white;">Australia</span> <span style="padding:0.125em 0.25em;background:#0083c6;color:white;">Europe</span> <span style="padding:0.125em 0.25em;background:#009640;color:white;">N. America</span> <span style="padding:0.125em 0.25em;background:#b70d7f;color:white;">S. America</span>
    config:
      colours:
        test: "#999000"
      data: test.data.heatmap
      key: Country
      colour: Colour
      circles: 0.9
      columns:
        - name: 2018
          template: '{{ Ranks→2018 }}'
        - name: 2019
          template: '{{ Ranks→2019 }}'
        - name: 2020
          template: '{{ Ranks→2020 }}'
  - title: "Lines coloured using a scale"
    description: |
      We can use a colour `scale` along with a `colour` column in the data (with optional `min` and `max` values) to set the colour using numeric values. In this case we will use the initial rank (found in the `Ranks→2018` column) to set the colours.
    config:
      data: test.data.heatmap
      key: Country
      colour: Ranks→2018
      scale: Viridis
      columns:
        - name: 2018
          template: '{{ Ranks→2018 }}'
        - name: 2019
          template: '{{ Ranks→2019 }}'
        - name: 2020
          template: '{{ Ranks→2020 }}'
  - title: "Add a legend"
    description: |
      We can use a colour `scale` along with a `colour` column in the data (with optional `min` and `max` values) to set the colour using numeric values. In this case we will use the initial rank (found in the `Ranks→2018` column) to set the colours.
    config:
      data: test.data.heatmap
      key: Country
      colour: Ranks→2018
      scale: Viridis
      columns:
        - name: 2018
          template: '{{ Ranks→2018 }}'
        - name: 2019
          template: '{{ Ranks→2019 }}'
        - name: 2020
          template: '{{ Ranks→2020 }}'
      legend:
        show: true
        position: top
        items:
          - value: 40
            label: 40
          - value: 30
            label: 30
          - value: 20
            label: 20
          - value: 10
            label: 10
          - value: 1
            label: 1
  - title: "Limit to the top x entries"
    description: |
      It may be that we have a long list of entries and we only want to show the top few. We can limit the visualisation using e.g. `top: 10` to get the top 10. But note that because things can move in and out of the top 10 the chart will also show those as a compressed group underneath. We will assign colours based on the `Ranks→2020` column in the data so we'll also set the `max` value to `10`. To help make things clearer, we'll also add rank `circles` and make the `stroke-width` narrower.
    config:
      data: test.data.heatmap
      key: Country
      colour: Ranks→2020
      max: 10
      scale: Viridis
      circles: 0.9
      columns:
        - name: 2018
          template: '{{ Ranks→2018 }}'
        - name: 2019
          template: '{{ Ranks→2019 }}'
        - name: 2020
          template: '{{ Ranks→2020 }}'
      top: 10
      stroke-width: 0.2
  - title: "Limit to the bottom x entries"
    description: |
      It may be that we have a long list of entries and we only want to show the bottom few. We make use of `top: 10` but set `reverse: true` to change the direction on which the rank is calculated. As things can move in and out of the bottom group, the chart will also show those as a compressed group underneath. We will assign colours based on the `Ranks→2020` column in the data so we'll also set the `max` value to `10`. To help make things clearer, we'll also add rank `circles` and make the `stroke-width` narrower.
    config:
      data: test.data.heatmap
      key: Country
      colour: Ranks→2020
      scale: Viridis
      circles: 0.9
      debug: true
      columns:
        - name: 2018
          template: '{{ Ranks→2018 }}'
        - name: 2019
          template: '{{ Ranks→2019 }}'
        - name: 2020
          template: '{{ Ranks→2020 }}'
      reverse: true
      max: 10
      top: 10
      stroke-width: 0.2
  - title: "A more complex example"
    description: |
      This uses a dataset of [private sector long term empty properties by ward in Leeds](https://datamillnorth.org/dataset/private-sector-long-term-empty-properties-by-ward) taken from Data Mill North. The CSV file contains the percentage of empty properties in each ward by month. We find the rank for each `key` (e.g. `Ward`) in each of the `columns`. As we want larger percentages to give lower ranks, we set `reverse` to `true`. We `colour` the lines by the ranking of the `2019` column in the data by referring to `2019_rank`.
    config:
      data: test.data.dmn-lcc-private-sector-long-term-empties
      key: Ward
      colour: "2019_rank"
      scale: Viridis
      stroke-width: 0.75
      reverse: true
      columns:
        - name: "2009"
          template: "{{ Jan-09 % }}"
        - name: "2010"
          template: "{{ Jan-10 % }}"
        - name: "2011"
          template: "{{ Jan-11 % }}"
        - name: "2012"
          template: "{{ Jan-12 % }}"
        - name: "2013"
          template: "{{ Jan-13 % }}"
        - name: "2014"
          template: "{{ Jan-14 % }}"
        - name: "2015"
          template: "{{ Jan-15 % }}"
        - name: "2016"
          template: "{{ Jan-16 % }}"
        - name: "2017"
          template: "{{ Jan-17 % }}"
        - name: "2018"
          template: "{{ Jan-18 % }}"
        - name: "2019"
          template: "{{ Jan-19 % }}"
options: |
  <ul>
  <li><code>data</code> - Either a reference to a CSV file in the Lume site or an array of rows with named attributes</li>
  <li><code>columns</code> - An ordered array of columns to use to build the ranking chart. Each must have a <code>name</code> but these can also be <a href="/documentation/virtual-columns/">virtual columns</a>. This allows you to use fewer columns than exist in the data. There can also be an optional <code>fillna</code> which will be used in the tooltip in place of null or NaN values.</li>
  <li><code>colours</code> - Define some <a href="/documentation/colours#specific-named-colours">visualisation-specific named colours</a>.</li>
  <li><code>width</code> - Set a specific width for the visualisation.</li>
  <li><code>height</code> - Set a specific height for the visualisation.</li>
  <li><code>key</code> - The title of the column that contains the things to be ranked.</li>
  <li><code>circles</code> - Add rank values on the lines by setting this in the range <code>0-1</code>. The default is <code>0</code>.</li>
  <li><code>curvature</code> - This sets the amount of curvature (between 0 and 1) for the line. The default is <code>1</code>.</li>
  <li><code>stroke-width</code> - This can be in the range 0 and 1. The default is 0.5.</li>
  <li><code>font-size</code> - Sets the size of the font to use.</li>
  <li><code><a href="/samples/chart/ranking/#example-3" aria-title="Set the colour of the lines">colour</a></code> - The title of the column to use to set the colour of each line. The value can either be a hex colour value or use a colour <code>scale</code>.</li>
  <li><code><a href="/samples/chart/ranking/#example-4" aria-title="Set the colour scale of a line">scale</a></code> - A <a href="../colours/#scales">colour scale</a> to use to set a line's stroke colour.</li>
  <li><code>min</code> - Used with <code>scale</code> and <code>max</code> to define the colour scale.</li>
  <li><code>max</code> - Used with <code>scale</code> and <code>min</code> to define the colour scale.</li>
  <li><code>legend</code> - Define the legend</li>
  <li><code>top</code> - Limit the visualisation to the top <em>x</em>. Note that because things can move in and out of the top 10 the chart will also show those as a compressed group underneath.</li>
  <li><code>gap</code> - (number) The size of the gap between any top <em>x</em> and the compressed group below. The default is <code>1</code>.</li>
  <li><code>divider</code> - (object) The SVG properties of the dividing line.</li>
  <li><code>tooltip</code> - This is to add tooltips to days. Either provide the name of an existing/virtual column in the data or construct one using <a href="/documentation/templates/">string templates</a>.</li>
  <li><code>reverse</code> - (boolean) By default the ranking is by the lowest value. However you can set it to use the highest value as the ranking by setting this to <code>true</code>.</li>
  <li><code>attribution</code> - Add a line of <a href="/documentation/chart-furniture/#attribution">attribution text</a> under the visualisation.</li>
  </ul>
---
